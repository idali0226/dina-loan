/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package se.nrm.dina.loan.notification.email;

import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Font;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfWriter;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.Serializable;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties; 
import javax.activation.DataHandler;
import javax.activation.DataSource;
import javax.ejb.Stateless;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
import javax.mail.util.ByteArrayDataSource;
import org.slf4j.LoggerFactory;
import se.nrm.dina.datamodel.impl.Agent;
import se.nrm.dina.loan.notification.util.HelpClass;
import se.nrm.dina.loan.notification.vo.OverdueLoan;

/**
 *
 * @author idali
 */
@Stateless
public class DinaMail implements Serializable {

    private final org.slf4j.Logger logger = LoggerFactory.getLogger(this.getClass());

    private static final String MAIL_HOST_NAME = "mail.smtp.host";
    private static final String MAIL_HOST = "mail.nrm.se";

    private static final String CC_ADMIN_EMAIL = "ida.li@nrm.se";
    private static final String DINA_TEMAIL_MAIL = "team@mail.dina-web.net"; 
    
    private static final String BODY_CONTENT = "The overdue loan list is attached.                   ";

    private static final Font CAT_FONT = new Font(Font.FontFamily.TIMES_ROMAN, 18, Font.BOLD);
    private static final Font SUB_FONT = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);
    private static final Font SMALL_BOLD = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.BOLD);
    private static final Font NORMAL_FONT = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.NORMAL);

    private final String TEXT_HTML = "text/html; charset=ISO-8859-1";

    private static final String TEXT_1 = "The following loans are overdue:";

    private final String APP_PDF = "application/pdf";
    private final String ATT_FILE_NAME = "OverdueLoan.pdf";
    private final String EMIL_SUBJECT = "Loan overdue notification";
    private final String DINA_ADMIN = "DINA admin";
    private final String GENERATED_BY = " Report generated by: ";

    private final String PRIMARY_BORROWER = " Primary borrower: ";
    private final String SECONDARY_BORROWER = "    Secondary borrower: ";
    private final String LINE = "________________________________________________________________________________";

    private final String ITEX_EMAIL = "iText, email";

    private StringBuilder sb;

    private Session session;

    public DinaMail() {
    }

    public void sendMail(Map<String, List<OverdueLoan>> map) {

        Properties props = new Properties();
        props.put(MAIL_HOST_NAME, MAIL_HOST);

        session = Session.getInstance(props, null);
        session.setDebug(true);

        map.entrySet().stream()
                .filter(m -> m.getKey() != null)
                .forEach(m -> {
//                    sendWithAttachment(m.getValue(), "ida.li@nrm.se");
                    sendWithAttachment(m.getValue(), m.getKey()); 
                });

        sendSpecifySupport();
    }

    private void sendSpecifySupport() {
        Message message = new MimeMessage(session);

        try {
            InternetAddress address = new InternetAddress(CC_ADMIN_EMAIL);

            message.setFrom(new InternetAddress(DINA_TEMAIL_MAIL));
            message.addRecipient(Message.RecipientType.TO, address);

            message.setSubject(EMIL_SUBJECT);
            message.setContent("Overdue loan email notifications have been sent successfully.", TEXT_HTML);
            Transport.send(message);
        } catch (MessagingException ex) {

        }
    }

    private void sendWithAttachment(List<OverdueLoan> overDueLoans, String address) {
        logger.info("sendWithAttachment : {}", address );

        ByteArrayOutputStream outputStream = null;
        try {
            //construct the text body part
            MimeBodyPart textBodyPart = new MimeBodyPart();
            textBodyPart.setText(BODY_CONTENT);

            //now write the PDF content to the output stream
            outputStream = new ByteArrayOutputStream();
            writePdf(outputStream, overDueLoans);
            byte[] bytes = outputStream.toByteArray();

            //construct the pdf body part
            DataSource dataSource = new ByteArrayDataSource(bytes, APP_PDF);
            MimeBodyPart pdfBodyPart = new MimeBodyPart();
            pdfBodyPart.setDataHandler(new DataHandler(dataSource));
            pdfBodyPart.setFileName(ATT_FILE_NAME);

            //construct the mime multi part
            MimeMultipart mimeMultipart = new MimeMultipart();
            mimeMultipart.addBodyPart(textBodyPart);
            mimeMultipart.addBodyPart(pdfBodyPart);

            Message message = new MimeMessage(session);
            message.setSubject(EMIL_SUBJECT);

            InternetAddress toAddress = new InternetAddress(address);
            message.addRecipient(Message.RecipientType.TO, toAddress);
//            message.addRecipient(Message.RecipientType.CC, new InternetAddress(ccAdminEmail));
            message.setContent(mimeMultipart);
            message.setFrom(new InternetAddress(DINA_TEMAIL_MAIL));

            Transport.send(message);
        } catch (MessagingException ex) {
            logger.error("error ...." + ex.getMessage());
        } finally {
            if (outputStream != null) {
                try {
                    outputStream.close();
                } catch (IOException ex) {
                    logger.error(ex.getMessage());
                }
            }
        }
    }

    /**
     * Writes the content of a PDF file (using iText API) to the
     * {@link OutputStream}.
     *
     * @param outputStream {@link OutputStream}.
     * @throws Exception
     */
    private void writePdf(OutputStream outputStream, List<OverdueLoan> overDueLoans) {
        try {
            Document document = new Document();
            PdfWriter.getInstance(document, outputStream);

            document.open();

            document.addTitle(EMIL_SUBJECT);
            document.addSubject(EMIL_SUBJECT);
            document.addKeywords(ITEX_EMAIL);
            document.addAuthor(DINA_ADMIN);
            document.addCreator(DINA_ADMIN);

            Paragraph preface = new Paragraph();
            // We add one empty line
            addEmptyLine(preface, 1);
            // Lets write a big header
            preface.add(new Paragraph(TEXT_1, CAT_FONT));
            addEmptyLine(preface, 1);
            // Will create: Report generated by: _name, _date
            preface.add(new Paragraph(getGeneratedBy(), SUB_FONT));
            addEmptyLine(preface, 2);

            preface.add(new Paragraph(" Loan number                   Loan date                Overdue date", SMALL_BOLD));
            preface.add(new Paragraph(LINE, NORMAL_FONT));

            Map<String, List<OverdueLoan>> map = getBorrowerMap(overDueLoans); 
            map.entrySet().stream()
                    .forEach(m -> {
                        List<OverdueLoan> list = m.getValue();
                        Agent borrower = list.get(0).getBorrower();
                        preface.add(new Paragraph(buildAgent(borrower, PRIMARY_BORROWER), SMALL_BOLD));

                        list.stream()
                                .forEach(l -> {
                                    Agent secondaryBorrower = l.getSecondaryBorrower();
                                    if(secondaryBorrower != null) {
                                        preface.add(new Paragraph(buildAgent(secondaryBorrower, SECONDARY_BORROWER), SMALL_BOLD));
                                    } 

                                    preface.add(new Paragraph(buildLoanString(l), NORMAL_FONT));
                                    preface.add(new Paragraph(LINE, NORMAL_FONT));
                                });
                        addEmptyLine(preface, 2);
                    });
            document.add(preface);
            document.newPage();
            document.close();
        } catch (DocumentException ex) {
            logger.error("this error : " + ex.getMessage());
        }
    }

    private String buildLoanString(OverdueLoan overdueLoan) {
        sb = new StringBuilder();
        sb.append("       ");
        sb.append(overdueLoan.getLoanNumber());
        sb.append("                   ");
        sb.append(HelpClass.getInstance().dateToString(overdueLoan.getLoanDate()));
        sb.append("                   ");
        sb.append(HelpClass.getInstance().dateToString(overdueLoan.getDueDate()));
        return sb.toString();
    }

    private String buildAgent(Agent agent, String agentType) {
        sb = new StringBuilder();
        sb.append(agentType);
        sb.append(agent.getFirstName());
        sb.append(" ");
        sb.append(agent.getLastName());
        sb.append("                  ");
        sb.append(agent.getEmail());
        return sb.toString();
    }

    private Map<String, List<OverdueLoan>> getBorrowerMap(List<OverdueLoan> overdueLoans) {
        Map<String, List<OverdueLoan>> map = new HashMap<>();

        overdueLoans.stream()
                .forEach(o -> {
                    List<OverdueLoan> loanList = new ArrayList<>();
                    Agent borrow = o.getBorrower();
                    if (borrow != null) {
                        if (map.containsKey(borrow.getEmail())) {
                            loanList = map.get(borrow.getEmail());
                        }
                        loanList.add(o);
                        map.put(borrow.getEmail(), loanList);
                    } 
                });
        return map;
    }

    private String getGeneratedBy() {
        sb = new StringBuilder();
        sb.append(GENERATED_BY);
        sb.append(DINA_ADMIN);
        sb.append(LocalDate.now());
        return sb.toString();
    }

    private void addEmptyLine(Paragraph paragraph, int number) {
        for (int i = 0; i < number; i++) {
            paragraph.add(new Paragraph(" "));
        }
    }

    public static void main(String[] args) {
//        new DinaMail().sendMail(null);
//        new DinaMail().sendSpecifySupport();

        Date date = new Date();
        System.out.println("day of the month: " + date.getDay());
    }
}
