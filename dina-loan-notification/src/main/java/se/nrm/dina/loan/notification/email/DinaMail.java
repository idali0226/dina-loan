/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package se.nrm.dina.loan.notification.email;

import com.itextpdf.text.Document;
import com.itextpdf.text.Font;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfWriter;
import java.io.ByteArrayOutputStream; 
import java.io.IOException;
import java.io.OutputStream;
import java.io.Serializable; 
import java.time.LocalDate;
import java.util.ArrayList; 
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties; 
import javax.activation.DataHandler;
import javax.activation.DataSource; 
import javax.ejb.Stateless; 
import javax.mail.Message;  
import javax.mail.Session;
import javax.mail.Transport; 
import javax.mail.internet.InternetAddress; 
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;  
import javax.mail.util.ByteArrayDataSource;
import org.slf4j.LoggerFactory; 
import se.nrm.dina.datamodel.impl.Agent;
import se.nrm.dina.loan.notification.util.HelpClass;
import se.nrm.dina.loan.notification.vo.OverdueLoan;

/**
 *
 * @author idali
 */
@Stateless
public class DinaMail implements Serializable {

    private final org.slf4j.Logger logger = LoggerFactory.getLogger(this.getClass());

    private static final int SMTP_HOST_PORT = 587;
    private static final String SMTP_AUTH_USER = "dina@mail.dina-web.net";
    private static final String SMTP_AUTH_PWD = "password";

    private final String MAIL_HOST = "mail.smtps.host";
    private final static String SMTP_HOST_NAME = "mail.dina-web.net";
    private final static String HOST = "mail.dina-web.net";
    private final String ccAdminEmail = "ida.li@nrm.se";

    private final String MAIL_PROTOCOL = "mail.transport.protocol";
    private final String SMTP = "smtp";
    private final String MAIL_AUTH = "mail.smtps.auth";
    private final String MAIL_PORT = "mail.smtp.port";
    private final String MAIL_ENABLE = "mail.smtp.starttls.enable";
    
    private static final String BODY_CONTENT = "The overdue loan list is attached.                   ";

    
    private static final Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18, Font.BOLD); 
    private static final Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);
    private static final Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.BOLD);
    private static final Font normalFont = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.NORMAL);
    
    private static final String TEXT_1 = "The following loans are overdue:";
 
 
    private final String APP_PDF = "application/pdf";
    private final String ATT_FILE_NAME = "OverdueLoan.pdf";
    private final String EMIL_SUBJECT = "Loan overdue notification";
    private final String DINA_ADMIN = "DINA admin";
    private final String GENERATED_BY = " Report generated by: ";
    
    private final String PRIMARY_BORROWER = " Primary borrower: ";
    private final String SECONDARY_BORROWER = "    Secondary borrower: ";
    private final String LINE = "________________________________________________________________________________";
    
    
    private final String ITEX_EMAIL = "iText, email"; 
      
    
    private StringBuilder sb;
   
    private Session session;
//    private Message message;
     MimeMessage message;

    private final Properties props;

    public DinaMail() {
         
        props = new Properties();
        props.put(SMTP_HOST_NAME, HOST);
        props.put(MAIL_PROTOCOL, SMTP);
        props.put(MAIL_HOST, SMTP_HOST_NAME);
        props.put(MAIL_AUTH, String.valueOf(Boolean.TRUE));
        props.put(MAIL_PORT, SMTP_HOST_PORT);
        props.put(MAIL_ENABLE, String.valueOf(Boolean.TRUE)); 
    }
    
    public void sendMail(Map<String, List<OverdueLoan>> map)  { 
        
        session = Session.getInstance(props, null);
        session.setDebug(true); 
        
        map.entrySet().stream()
                .filter(m -> m.getKey() != null)
                .forEach(m -> {
                    sendWithAttachment(m.getValue(), m.getKey());
                }); 
    }
    
    private void sendWithAttachment(List<OverdueLoan> overDueLoans, String address) {

        logger.info("sendWithAttachment : {}", address);
 

        ByteArrayOutputStream outputStream = null;
        try {
                        //construct the text body part
            MimeBodyPart textBodyPart = new MimeBodyPart();
            textBodyPart.setText(BODY_CONTENT);
             
            //now write the PDF content to the output stream
            outputStream = new ByteArrayOutputStream();
            writePdf(outputStream, overDueLoans);
            byte[] bytes = outputStream.toByteArray();
            
            //construct the pdf body part
            DataSource dataSource = new ByteArrayDataSource(bytes, APP_PDF);
            MimeBodyPart pdfBodyPart = new MimeBodyPart();
            pdfBodyPart.setDataHandler(new DataHandler(dataSource));
            pdfBodyPart.setFileName(ATT_FILE_NAME);
            
            //construct the mime multi part
            MimeMultipart mimeMultipart = new MimeMultipart();
            mimeMultipart.addBodyPart(textBodyPart);
            mimeMultipart.addBodyPart(pdfBodyPart);
  
            message = new MimeMessage(session); 
            message.setSubject(EMIL_SUBJECT);
 
            message.addRecipient(Message.RecipientType.TO, new InternetAddress(address));
            message.addRecipient(Message.RecipientType.CC, new InternetAddress(ccAdminEmail));
            message.setContent(mimeMultipart); 
            message.setFrom(new InternetAddress(SMTP_AUTH_USER));
             
            
            InternetAddress[] toaddress = new InternetAddress[]{new InternetAddress(address), new InternetAddress(ccAdminEmail)};
            
            Transport transport = session.getTransport();
            transport.connect(SMTP_HOST_NAME, SMTP_HOST_PORT, SMTP_AUTH_USER, SMTP_AUTH_PWD);
            transport.sendMessage(message, toaddress);
            transport.close(); 
        } catch (Exception ex) {
            logger.error(ex.getMessage());
        } finally {
            if(outputStream != null) {
                try {
                    outputStream.close();
                } catch (IOException ex) {
                    logger.error(ex.getMessage());
                }
            } 
        }
    }
     
    /**
     * Writes the content of a PDF file (using iText API)
     * to the {@link OutputStream}.
     * @param outputStream {@link OutputStream}.
     * @throws Exception
     */
    private void writePdf(OutputStream outputStream, List<OverdueLoan> overDueLoans) throws Exception {
        Document document = new Document();
        PdfWriter.getInstance(document, outputStream);
         
        document.open();
         
        document.addTitle(EMIL_SUBJECT);
        document.addSubject(EMIL_SUBJECT);
        document.addKeywords(ITEX_EMAIL);
        document.addAuthor(DINA_ADMIN);
        document.addCreator(DINA_ADMIN);
        
        
        Paragraph preface = new Paragraph();
        // We add one empty line
        addEmptyLine(preface, 1);
        // Lets write a big header
        preface.add(new Paragraph(TEXT_1, catFont)); 
        addEmptyLine(preface, 1);
        // Will create: Report generated by: _name, _date
        preface.add(new Paragraph(getGeneratedBy(), subFont));
        addEmptyLine(preface, 2);

        preface.add(new Paragraph(" Loan number                   Loan date                Overdue date", smallBold));
        preface.add(new Paragraph(LINE, normalFont));

        Map<String, List<OverdueLoan>> map = getBorrowerMap(overDueLoans);
        map.entrySet().stream()
                .forEach(m -> {
                    List<OverdueLoan> list = m.getValue();
                    Agent borrower = list.get(0).getBorrower();
                    preface.add(new Paragraph(buildAgent(borrower, PRIMARY_BORROWER), smallBold));

                    list.stream()
                    .forEach(l -> {
                        Agent secondaryBorrower = l.getSecondaryBorrower();
                        preface.add(new Paragraph(buildAgent(secondaryBorrower, SECONDARY_BORROWER), smallBold));
                
                        preface.add(new Paragraph(buildLoanString(l), normalFont));
                        preface.add(new Paragraph(LINE, normalFont));
                    });
                    addEmptyLine(preface, 2);
                }); 
        document.add(preface);
        document.newPage();
        document.close();
    }

    private String buildLoanString(OverdueLoan overdueLoan) { 
        sb = new StringBuilder();
        sb.append("       ");
        sb.append(overdueLoan.getLoanNumber());
        sb.append("                   ");
        sb.append(HelpClass.getInstance().dateToString(overdueLoan.getLoanDate()));
        sb.append("                   ");
        sb.append(HelpClass.getInstance().dateToString(overdueLoan.getDueDate()));
        return sb.toString();
    }

    private String buildAgent(Agent agent, String agentType) {
        sb = new StringBuilder();
        sb.append(agentType);
        sb.append(agent.getFirstName());
        sb.append(" ");
        sb.append(agent.getLastName());
        sb.append("                  ");
        sb.append(agent.getEmail());
        return sb.toString();  
    }
    
        
    private Map<String, List<OverdueLoan>> getBorrowerMap(List<OverdueLoan> overdueLoans) {
        Map<String, List<OverdueLoan>> map = new HashMap<>();
         
        overdueLoans.stream()
                .forEach(o -> {
                    List<OverdueLoan> loanList = new ArrayList<>();
                    Agent borrow = o.getBorrower();
                    if(map.containsKey(borrow.getEmail())) {
                        loanList = map.get(borrow.getEmail());
                    }
                    loanList.add(o);
                    map.put(borrow.getEmail(), loanList);
                }); 
        return map;
    }
    
    private String getGeneratedBy() {
        sb = new StringBuilder();
        sb.append(GENERATED_BY);
        sb.append(DINA_ADMIN);
        sb.append(LocalDate.now());
        return sb.toString(); 
    }
        
    private void addEmptyLine(Paragraph paragraph, int number) {
        for (int i = 0; i < number; i++) {
          paragraph.add(new Paragraph(" "));
        }
    }
    
    public static void main(String[] args) {
        new DinaMail().sendMail(null);
    }
}
